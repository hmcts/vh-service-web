/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const SERVICE_WEB_API_BASE_URL = new InjectionToken<string>('SERVICE_WEB_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(SERVICE_WEB_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5600";
    }

    /**
     * @return Success
     */
    getConfiguration(): Observable<void> {
        let url_ = this.baseUrl + "/api/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfiguration(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Return details for a hearing booked for the current user
     * @param id Id of the hearing to get details for
     * @return Success
     */
    getHearingById(id: string): Observable<HearingDetailsResponse> {
        let url_ = this.baseUrl + "/api/hearings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHearingById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHearingById(<any>response_);
                } catch (e) {
                    return <Observable<HearingDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetHearingById(response: HttpResponseBase): Observable<HearingDetailsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HearingDetailsResponse.fromJS(resultData200) : new HearingDetailsResponse();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingDetailsResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSuitabilityAnswers(): Observable<HearingSuitabilityResponse[]> {
        let url_ = this.baseUrl + "/api/hearing-suitability";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserSuitabilityAnswers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserSuitabilityAnswers(<any>response_);
                } catch (e) {
                    return <Observable<HearingSuitabilityResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingSuitabilityResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserSuitabilityAnswers(response: HttpResponseBase): Observable<HearingSuitabilityResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HearingSuitabilityResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingSuitabilityResponse[]>(<any>null);
    }

    /**
     * Update Suitability answers
     * @param hearingId Hearing Id
     * @param answers (optional) List of Suitability Answers
     * @return Success
     */
    updateSuitabilityAnswers(hearingId: string, answers: HearingSuitabilityAnswer[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/hearings/{hearingId}";
        if (hearingId === undefined || hearingId === null)
            throw new Error("The parameter 'hearingId' must be defined.");
        url_ = url_.replace("{hearingId}", encodeURIComponent("" + hearingId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(answers);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSuitabilityAnswers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSuitabilityAnswers(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSuitabilityAnswers(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    index(): Observable<void> {
        let url_ = this.baseUrl + "/api/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

/** Details for a hearing */
export class HearingDetailsResponse implements IHearingDetailsResponse {
    /** The hearing lead case name */
    case_name!: string | undefined;
    /** The hearing lead case number */
    case_number!: string | undefined;
    /** The case type */
    case_type!: string | undefined;
    /** The type of hearing */
    hearing_type!: string | undefined;
    /** Time and date the hearing is scheduled for */
    scheduled_date_time!: Date | undefined;

    constructor(data?: IHearingDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.case_name = data["case_name"];
            this.case_number = data["case_number"];
            this.case_type = data["case_type"];
            this.hearing_type = data["hearing_type"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HearingDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["case_name"] = this.case_name;
        data["case_number"] = this.case_number;
        data["case_type"] = this.case_type;
        data["hearing_type"] = this.hearing_type;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        return data; 
    }
}

/** Details for a hearing */
export interface IHearingDetailsResponse {
    /** The hearing lead case name */
    case_name: string | undefined;
    /** The hearing lead case number */
    case_number: string | undefined;
    /** The case type */
    case_type: string | undefined;
    /** The type of hearing */
    hearing_type: string | undefined;
    /** Time and date the hearing is scheduled for */
    scheduled_date_time: Date | undefined;
}

/** The answers submitted thus far for a given hearing and participant */
export class HearingSuitabilityResponse implements IHearingSuitabilityResponse {
    /** Id for the hearing the answers have been or should be submitted for */
    hearing_id!: string | undefined;
    /** When the hearing is scheduled at */
    hearing_scheduled_at!: Date | undefined;
    /** A list of answers, will be empty before any answers have been submitted */
    answers!: HearingSuitabilityAnswer[] | undefined;

    constructor(data?: IHearingSuitabilityResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hearing_id = data["hearing_id"];
            this.hearing_scheduled_at = data["hearing_scheduled_at"] ? new Date(data["hearing_scheduled_at"].toString()) : <any>undefined;
            if (data["answers"] && data["answers"].constructor === Array) {
                this.answers = [] as any;
                for (let item of data["answers"])
                    this.answers!.push(HearingSuitabilityAnswer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HearingSuitabilityResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingSuitabilityResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hearing_id"] = this.hearing_id;
        data["hearing_scheduled_at"] = this.hearing_scheduled_at ? this.hearing_scheduled_at.toISOString() : <any>undefined;
        if (this.answers && this.answers.constructor === Array) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        return data; 
    }
}

/** The answers submitted thus far for a given hearing and participant */
export interface IHearingSuitabilityResponse {
    /** Id for the hearing the answers have been or should be submitted for */
    hearing_id: string | undefined;
    /** When the hearing is scheduled at */
    hearing_scheduled_at: Date | undefined;
    /** A list of answers, will be empty before any answers have been submitted */
    answers: HearingSuitabilityAnswer[] | undefined;
}

/** The answer for a suitability question */
export class HearingSuitabilityAnswer implements IHearingSuitabilityAnswer {
    /** Unique identifier for the question answered */
    question_key!: string | undefined;
    /** Answer string, can be any type of answer, a boolean, enumeration etc */
    answer!: string | undefined;
    /** Supplementary data to further extend the answer, can be notes or data relating to the answer */
    extended_answer!: string | undefined;

    constructor(data?: IHearingSuitabilityAnswer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.question_key = data["question_key"];
            this.answer = data["answer"];
            this.extended_answer = data["extended_answer"];
        }
    }

    static fromJS(data: any): HearingSuitabilityAnswer {
        data = typeof data === 'object' ? data : {};
        let result = new HearingSuitabilityAnswer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["question_key"] = this.question_key;
        data["answer"] = this.answer;
        data["extended_answer"] = this.extended_answer;
        return data; 
    }
}

/** The answer for a suitability question */
export interface IHearingSuitabilityAnswer {
    /** Unique identifier for the question answered */
    question_key: string | undefined;
    /** Answer string, can be any type of answer, a boolean, enumeration etc */
    answer: string | undefined;
    /** Supplementary data to further extend the answer, can be notes or data relating to the answer */
    extended_answer: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}