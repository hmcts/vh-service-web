// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ServiceWebsite.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Representative lands on Questionnaire Completed page")]
    public partial class RepresentativeLandsOnQuestionnaireCompletedPageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QuestionnaireCompleted.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Representative lands on Questionnaire Completed page", "As a Representative\r\nI want to see a summary of the answers I submitted\r\nSo that " +
                    "I can print a copy for my records", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Representative views questionnaire completed page for a client who is not suitabl" +
            "e for a video hearing")]
        [NUnit.Framework.CategoryAttribute("smoketest")]
        [NUnit.Framework.CategoryAttribute("VIH-4443")]
        public virtual void RepresentativeViewsQuestionnaireCompletedPageForAClientWhoIsNotSuitableForAVideoHearing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Representative views questionnaire completed page for a client who is not suitabl" +
                    "e for a video hearing", new string[] {
                        "smoketest",
                        "VIH-4443"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("Representative participant starts the questionnaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "page",
                        "answer",
                        "details"});
            table1.AddRow(new string[] {
                        "about you",
                        "Yes",
                        "I am partially deaf"});
            table1.AddRow(new string[] {
                        "access to a suitable room",
                        "Yes",
                        ""});
            table1.AddRow(new string[] {
                        "about your client",
                        "Yes",
                        "mobility issues"});
            table1.AddRow(new string[] {
                        "client attendance",
                        "Yes",
                        ""});
            table1.AddRow(new string[] {
                        "hearing suitability",
                        "Yes",
                        "insufficient documents"});
            table1.AddRow(new string[] {
                        "your computer",
                        "Yes",
                        ""});
            table1.AddRow(new string[] {
                        "about your computer",
                        "Yes",
                        ""});
#line 9
 testRunner.When("provides answer", ((string)(null)), table1, "When ");
#line 19
 testRunner.Then("Representative should be on \'questionnaire completed\' screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.And("all the answers should match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("proceeds to next page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("Representative should be on \'same computer\' screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Representative views questionnaire completed page for a client who is suitable fo" +
            "r a video hearing")]
        [NUnit.Framework.CategoryAttribute("VIH-4443")]
        public virtual void RepresentativeViewsQuestionnaireCompletedPageForAClientWhoIsSuitableForAVideoHearing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Representative views questionnaire completed page for a client who is suitable fo" +
                    "r a video hearing", new string[] {
                        "VIH-4443"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("Representative participant starts the questionnaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "page",
                        "answer"});
            table2.AddRow(new string[] {
                        "about you",
                        "No"});
            table2.AddRow(new string[] {
                        "access to a suitable room",
                        "Yes"});
            table2.AddRow(new string[] {
                        "about your client",
                        "No"});
            table2.AddRow(new string[] {
                        "client attendance",
                        "No"});
            table2.AddRow(new string[] {
                        "hearing suitability",
                        "No"});
            table2.AddRow(new string[] {
                        "your computer",
                        "Yes"});
            table2.AddRow(new string[] {
                        "about your computer",
                        "NotSure"});
#line 27
 testRunner.When("provides answer", ((string)(null)), table2, "When ");
#line 37
 testRunner.Then("Representative should be on \'questionnaire completed\' screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("all the answers should match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("a link with text \'Print my answers\' to print the answers should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("proceeds to next page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("Representative should be on \'same computer\' screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

